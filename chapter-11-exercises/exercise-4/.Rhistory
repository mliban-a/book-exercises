calculate_earnings <- function() {
earnings <- hours * pay_rate
return(earnings)
}
employee1 <- calculate_earnings(40,15)
employee1
print()
print()
alculate_earnings <- function() {
earnings <- hours * pay_rate
return(earnings)
}
employee1 <- calculate_earnings(40,15)
print()
print(employee1)
calculate_earnings <- function() {
earnings <- hours * pay_rate
return(earnings)
}
employee1 <- calculate_earnings(40,15)
print(employee1)
calculate_earnings <- function() {
earnings <- hours * pay_rate
return(earnings)
}
employee1 <- calculate_earnings(40,15)
print(employee1)
employee1_earnings <- calculate_earnings()
hours <- 35 # 35 hours were worked this week
pay_rate <- 15  # Pay rate was at Seattle minimum wage
earnings <- hours * pay_rate
earnings
# What if we wanted to do this for a 5 employees? what about for 50 employees?
# We could do it by hand but that is time consuming and error-prone.
# Instead, we can convert the above script into a function.
#
### 1.1 Defining Functions -------------------------------------------------------
#
# Defining function called 'calculate_earnings'
calculate_earnings <- function() {
earnings <- hours * pay_rate
return(earnings)
}
employee1 <- calculate_earnings(40,15)
#
# Here, we created a function called 'calculate_earnings()'.
# It takes two arguments, it multiplies the first argument 'hours' with the second argument 'pay_rate'.
#
# **Question 1.** Which line of code will the function returned?
#
# **Answer:** ______________________________________
#
# **Question 2.** The function didn't return anything -- why not?
#
# **Answer:** ______________________________________
#
### 1.2 Calling Functions
#
# We can call calculate_earnings() to calculate the earnings of employee 1 who worked 10 hours this week and earns $12/hr.
#
# Calling function 'calculate earnings' for employee 1
employee1_earnings <- calculate_earnings()
print()
calculate_ratio <- function(numerator, denomoinator) {
ratio <- numerator/denomoinator
return(ratio)
}
# Call calculate_ratio()
print(ratio)
calculate_ratio <- function(numerator, denomoinator) {
ratio <- numerator/denomoinator
return(ratio)
}
# Call calculate_ratio()
print(calculate_ratio)
calculate_ratio <- function(numerator, denomoinator) {
ratio <- numerator/denomoinator
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60,12)
return(year, major)
return(greet)
greet <- paste("Hello I am a" year + "year, and my major is" major.)
intro <- function(year, major) {
greet <- paste("Hello I am a" + year + "year, and my major is" + major.)
return(greet)
}
# Call intro() function
intro(2nd, Info)
intro <- function(year, major) {
greet <- paste("Hello I am a" + year + "year, and my major is" + major.)
return(greet)
}
# Call intro() function
intro(second, Info)
intro <- function(year, major) {
greet <- paste("Hello I am a" + year + "year, and my major is" + major.)
return(greet)
}
# Call intro() function
intro(Second, Info)
days_to_deadline <- function(deadline, today) {  # ________
days_remaining <- as.Date(deadline) - as.Date(today)  # ________
return(days_remaining)  # ________
}
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
intro <- function(year, major) {
greet <- paste("Hello I am a" + year + "year, and my major is" + major.)
return(greet)
}
# Call intro() function
intro(second, info)
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major.)
return(greet)
}
intro(second, Info)
greet <- paste("Hello I am a", year, "year and my major is", major.)
return(greet)
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year and my major is", major.)
return(greet)
}
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year and my major is", major.)
return(greet)
}
# Call intro() function
intro(second, Info)
#### Title: INFO 201 Lab Exercise: Markdown
Author: Mursal Abdikadir
Date: January 7th, 2020
my_name <- "Mursal"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
str_count(name_length)
print
my_name <- "Mursal"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# Without making a new variable, print out the `intro` combined with the new
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
# Use the `plot()` function to plot your `wave`!
plot(wave)
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
names <- c("Mursal, Alex, Alex")
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
lenght()
m <- seq(10,1)
# Use the `length()` function to get the number of elements in `n`
length()
m <- seq(10,1)
x_range <- seq(-5,10,.1)
print(x_range)
sin_wave <- sin(x_range)
cos_wave <- cos(x_range)
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
employees <- paste("Employee", 1:1000)
print(employees)
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# CH 10 Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:1000)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- (100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017, adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# CH 10 Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:1000)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- (100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017, adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- (100; 40000; 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- (100: 40000: 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- ( 100, 40000, 50000)
# CH 10 Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:1000)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif( 100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017, adjustments)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57", "salaries_2018"])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE, ])
# What was the dollar value of the highest raise?
salaries[salaries$adjustments == max() ]
salaries[salaries$adjustments == max(salaries$adjustments), "adjustments"]
salaries <- data.frame(employees,salaries_2017, adjustments, stringsAsFactors = FALSE)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$adjustments == max(salaries$adjustments), "employees"]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$got_raise == FALSE, ]
mean(paycut$adjustments)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == FALSE, ]
mean(paycut$adjustments)
#################
#### PART 1 #####
#################
# Step 1
# Creates a vector of Ta names
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
# Step 2
# creates a vector, and creates 8 random numbers given the mean and sd
math_grades <- rnorm(8, mean =  3.6, sd = 0.4)
# Step 3
# creates a vector, and creates 8 random numbers given the mean and sd
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
# Step 4
# creates a data frame combining the three vectors
ta_grades <- data.frame(tas, math_grades, spanish_grades,
stringsAsFactors = FALSE)
# Step 5
# created a colnames_string in order to make the col names comma separated
# in order to find the number of rows and columns I used the nrow and ncol
# function to display the number of rows and columns in the data frame
colnames_string <- paste(tas, sep = " ", collapse = ", ")
x_rows <- nrow(ta_grades)
y_col <- ncol(ta_grades)
COL_NAMES <- paste(colnames(ta_grades), collapse = ", ")
table_description <- paste("The grade data frame has", x_rows,
"rows and", y_col ,"cols:", COL_NAMES)
print(table_description)
# Step 6
new_col_names <- c("ta", "math_grade", "spanish_grade")
colnames(ta_grades) <- new_col_names
# Step 7
# in order to create a new column, the data frame was called initalizing a new
# name for the column. The ta_grades$, accesses the data frame prompting
# whether the values in the math are greater than the spanish column,
# hence returning true or false because of the boolean in place.
ta_grades["better_at_math"] <- ta_grades$math_grade > ta_grades$spanish_grade
# Step 8
ta_grades[ta_grades$ta == "Phuong Vu", ]
# Step 9
# this line returns the number of rows inside the data frame ta_grades
# specifically the better_at_math column that have the values True in them
num_better_at_math <- nrow(ta_grades[ta_grades["better_at_math"] == TRUE,])
print(num_better_at_math)
# Step 10
# from the ta grades data frame it makes sure the grades,
# spanish and math, do not exceed 4.0
ta_grades[ta_grades$math_grade > 4.0, "math_grade"] <- 4.0
ta_grades[ta_grades$spanish_grade > 4.0, "spanish_grade"] <- 4.0
# Step 11
# Am I supposed to have row.names here?
write.csv(ta_grades, "data/grade_data.csv", row.names = FALSE)
#################
#### PART 2 #####
#################
# Step 1
data(Titanic)
View(Titanic)
# Step 2
is.data.frame(Titanic)
# Step 3
titanic_df <- as.data.frame(Titanic)
# Step 4
# Uses dollar sign notation in order to find all rows that contained a child
# First had to access the titanic data frame and the column with age,
# hence it requests to select all rows that contain Child
children <- titanic_df[titanic_df$Age == "Child", ]
View(children)
# Step 5
# num rows of child is sum of frequencies
num_children <- sum(children$Freq)
print(num_children)
# Step 6
# in order to find the passengers that didn't survive, I accessed the titanic
# data frame specifically the Survived columns that contain No.
# Hence you go to the Freq column and it finally retrieves the max value.
# the most losses variable does the same however it enables for the row with
# the highest freq to be printed.
max <- max(titanic_df[titanic_df$Survived == "No", ] $Freq)
most_losses <- titanic_df[titanic_df$Survived == "No" & titanic_df$Freq
== max, ]
print(most_losses)
# Step 7
# I begin by creating a sub-data frame in order to access all the adult males
# only I do this by creating a data frame. Eventually I create a subdata frame
# for both adult females and children. I use the & boolean to narrow my result.
# I then sum up all the adult males then divide the adult males that survived
# by the total num of adult males in order to get the rate.
# in order to find the rate of the and female survival I divided the total
# number of adult females and children survived by the sum of both adult
# females and children.
calc_survival_rate <- function(class){
ticketing_class <- titanic_df[titanic_df$Class == class, ]
adult_males <- ticketing_class[ticketing_class$Age == "Adult" &
ticketing_class$Sex == "Male", ]
total_num_men <- sum(adult_males$Freq)
num_survived <- sum( adult_males[adult_males$Survived == "Yes", ] $Freq)
rate <- round((num_survived/total_num_men) *100)
adult_females <- ticketing_class[ticketing_class$Age == "Adult" &
ticketing_class$Sex == "Female", ]
child_survival <- ticketing_class[ticketing_class$Age == "Child", ]
both_genders <- ticketing_class[ticketing_class$Age == "Child" |
(ticketing_class$Age == "Adult" &
ticketing_class$Sex == "Female"), ]
sum_of_genders <- sum(both_genders$Freq)
total_num_adult_females_survived <- sum(adult_females[adult_females$Survived
== "Yes", ] $Freq)
total_num_children_survived <- sum(child_survival[child_survival$Survived
== "Yes", ] $Freq)
total_adult_female_and_child_survival <- total_num_adult_females_survived +
total_num_children_survived
rate_child_female <- round((total_adult_female_and_child_survival
/sum_of_genders) *100)
paste0("Of ", class, " class ", rate, "% of men survived and ",
rate_child_female, "% of women and children survived.")
}
# Step 8
calc_survival_rate("3rd")
# Step 9
# 1. I noticed that there was a signficant lower
# difference in survival rates for men in the 1st class than the percent of
# women and children who survived in the 3rd. In the 3rd class I noticed that
# the percent of men and women dropped lower by about half of its survival
# rates in the 1st class.
# 2. I noticed that there was fewer amount of children belonging to each class
# in comparison to the men and women.
#################
#### PART 3 #####
#################
# Step 1
# Mattias Lindgren 1800 - 1970
# IHME 1970 - 2016
# UN 2017 -2018
# Step 2
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
View(life_exp_df)
# Step 3
# this function gets the means and disregards the na values
get_col_mean <- function(column){
mean(column, na.rm = TRUE)
}
# Step 4
get_col_mean(life_exp_df$X2018)
# Step 5
# we go through column except the first
# the function gets the column by name
world_averages <- lapply(names(life_exp_df)[-1],
function(x) get_col_mean(life_exp_df[, x]))
# Step 6
# calculates the different in life expectancy in 2018 - 1918
world_change_18 <- world_averages$X2018 - world_averages$X1918
print(world_change_18)
# Step 7
# calculates the difference in 2016 and 1996
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# Step 8
# counts the number of countries that don't have a change greater than 1
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
# Step 9
# this variable prints out our country with the highest change, in order to do
# so I accessed the data frame then wanted to access the country column from
# the country column I accessed the recent change column looking for the max
most_improved <- life_exp_df$country[life_exp_df$recent_change
== max(life_exp_df$recent_change)]
max(life_exp_df$recent_change, na.rm = TRUE)
print(most_improved)
# Step 10
# this function looks at the 2018 column and then goes to the specified country
# and subtracts it from the 1968 column using bracket notation
get_country_change <- function(country, life_exp_df) {
change_in_life <- life_exp_df$X2018[life_exp_df$country == country] -
life_exp_df$X1968[life_exp_df$country == country]
return(change_in_life)
}
# Step 11
get_country_change("Haiti", life_exp_df )
# Step 12
# creates a new data frame by accessing the life expectancy data frame and
# creating inputs for both countries given the year 2018
# hence returns the new data frame.
compare_countries <- function(country_1, country_2, life_exp_df) {
new_dat <- life_exp_df[life_exp_df$country == country_1 | life_exp_df$country
== country_2, c("country", "X2018", "recent_change"), ]
return(new_dat)
}
# Step 13
# Returns the new data frame comparing the life expectancies of both US and
# Cuba.
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
compare_countries <- function(country_1, country_2, life_exp_df) {
new_dat <- life_exp_df[life_exp_df$country == country_1 | life_exp_df$country
== country_2, c("country", "X2018", "recent_change"), ]
return(new_dat)
}
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
print(us_vs_cuba)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("dplyr")
install.packages("nycflights13")
library("nycflights13")
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
View(flights)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
View(to_sea)
to_sea <- select(to_sea, origin, dest, delayed_in_air)
View(to_sea)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
setwd("~/Desktop/book-exercises/chapter-11-exercises/exercise-4")
